<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 * =======================================================================
 * = Description: openCRX Custom build.xml
 * = Copyright:   (c) 2003-2016 CRIXP AG
 * =======================================================================
 * This software is published under the BSD license
 * as listed below.
 * 
 * Copyright (c) 2004-2016, CRIXP Corp., Switzerland
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met:
 * 
 * * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 * 
 * * Neither the name of CRIXP Corp. nor the names of the contributors
 * to openCRX may be used to endorse or promote products derived
 * from this software without specific prior written permission
 * 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * This product includes software developed by the Apache Software
 * Foundation (http://www.apache.org/).
 * 
 * This product includes software developed by contributors to
 * openMDX (http://www.openmdx.org/)
-->
<project 
  name="opencrx-sample" 
  default="-projecthelp" 
  xmlns:openmdx="xri://(antlib:org.openmdx.tools.ant)" 
  xmlns:antcontrib="antlib:net.sf.antcontrib" 
  xmlns:ivy="xri:(antlib:fr.jayasoft.ivy.ant)"
>
	<description>Build the openCRX/Sample project</description>
	<property name="project.specification.title" value="openCRX/Sample"/>
	<!-- Slash separated platform list, the last entry being the default -->
	<property name="project.platform.list" value="jre-1.8"/>
	<!-- openMDX libraries -->
	<property name="openmdx.version" value="2.15.0"/>
	<import file="../opt/openmdx-${openmdx.version}/ant/etc/ant/build-properties.xml"/>
	<import file="../opt/openmdx-${openmdx.version}/ant/etc/ant/build-library.xml"/>
	<!-- openCRX libraries -->
	<property name="opencrx.version" value="4.0.0"/>
	<property name="opencrx.home" location="../opt/opencrx-${opencrx.version}"/>
	<property name="thirdparty.model.name" value="openCRX 3 ~ Core (EMF)"/>
	<property name="thirdparty.model.home" value="${opencrx.home}/core/src/model/emf/"/>
	<path id="project.lib.classpath">
		<path refid="openmdx.core.lib"/>
		<path refid="osgi.enterprise.api"/>
		<path refid="osgi.extension.lib"/>
		<pathelement location="${opencrx.home}/${build.java.platform}/core/lib/opencrx-kernel.jar"/>
		<pathelement location="${opencrx.home}/${build.java.platform}/core/lib/opencrx-security.jar"/>
		<pathelement location="${opencrx.home}/${build.java.platform}/core/lib/opencrx-application.jar"/>
		<pathelement location="${opencrx.home}/apache/${build.target.platform}/poi/lib/poi.jar"/>
		<pathelement location="${opencrx.home}/itseasy/${build.java.platform}/srw/lib/srw.jar"/>
		<pathelement location="${opencrx.home}/lowagie/${build.java.platform}/itext/lib/itext.jar"/>
		<pathelement location="${openmdx.home}/${build.java.platform}/security/lib/openmdx-security.jar"/>
		<pathelement location="${openmdx.home}/${build.java.platform}/portal/lib/openmdx-portal.jar"/>
		<pathelement location="../${build.java.platform}/${base.dir.name}/lib/opencrx-extension.jar"/>
	</path>
	<path id="project.bin.classpath">
		<path refid="project.lib.classpath"/>
		<pathelement location="${basedir}/src/resource"/>
		<pathelement location="${build.dir}/bin"/>
		<pathelement location="${build.dir}/model/${ant.project.name}.openmdx-xmi.zip"/>
		<pathelement location="../opt/hsqldb/jre-1.6/hsqldb-2/lib/hsqldb.jar"/>
	</path>
	<patternset id="client.jar.content">
		<include name="org/opencrx/sample/client1/cci2/**" />
		<include name="org/opencrx/sample/client1/jmi1/**" />
	</patternset>
	<!-- ******************************************************************* -->
	<!-- * generate -->
	<!-- ******************************************************************* -->
	<target name="generate" description="Generate version, jt and model dependend files" depends="build-init">
		<ant dir="${openmdx.home}/core" inheritAll="false" target="prepare">
			<property name="build.target.platform" value="${build.java.platform}"/>
		</ant>
		<ant dir="${openmdx.home}/security" inheritAll="false" target="prepare">
			<property name="build.target.platform" value="${build.java.platform}"/>
		</ant>
		<ant dir="${opencrx.home}/core" inheritAll="false" target="prepare">
			<property name="build.target.platform" value="${build.java.platform}"/>
		</ant>
		<antcall target="-preprocess-model-files-"/>
		<java classname="org.openmdx.base.mof.spi.Model_1Dumper" fork="true" classpathref="project.bin.classpath">
			<arg value="${build.dir}/model/openmdxmof.wbxml" />
			<sysproperty key="java.protocol.handler.pkgs" value="org.openmdx.kernel.url.protocol" />
			<sysproperty key="openmdxmof.properties" value="file:client.openmdxmof.properties" />
		</java>
	</target>
	<!-- ******************************************************************* -->
	<!-- * test -->
	<!-- ******************************************************************* -->
	<target name="test"/>
	<!-- ******************************************************************* -->
	<!-- * deliverables -->
	<!-- ******************************************************************* -->
	<target name="deliverables" description="Populate the project's deliverables directory" depends="deliverables-init,java-archives,source-archives"/>
	<!-- ******************************************************************* -->
	<!-- * assemble -->
	<!-- ******************************************************************* -->
	<target name="assemble" description="Build assemblies" depends="build-init">
		<!-- Assert existence of data.dir directories -->
		<mkdir dir="src/data/${data.dir}/_style"/>
		<mkdir dir="src/data/${data.dir}/bootstrap"/>
		<mkdir dir="src/data/${data.dir}/code"/>
		<mkdir dir="src/data/${data.dir}/control"/>		
		<mkdir dir="src/data/${data.dir}/data"/>
		<mkdir dir="src/data/${data.dir}/documents"/>
		<mkdir dir="src/data/${data.dir}/filters"/>
		<mkdir dir="src/data/${data.dir}/html"/>
		<mkdir dir="src/data/${data.dir}/images"/>
		<mkdir dir="src/data/${data.dir}/ui"/>
		<mkdir dir="src/data/${data.dir}/texts"/>
		<mkdir dir="src/data/${data.dir}/wizards"/>
		<!-- Assert existence of ical, caldav, carddav, webdav, imap, vcard WEB-INF dir -->
		<mkdir dir="src/data/${data.dir}.ical/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.caldav/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.carddav/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.webdav/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.imap/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.vcard/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.spaces/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.rest/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.ldap/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.bpi/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.calendar/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.contacts/WEB-INF"/>
		<mkdir dir="src/data/${data.dir}.documents/WEB-INF"/>
		<!-- Assert existence of ical, caldav, carddav, webdav, imap, vcard META-INF dir -->
		<mkdir dir="src/data/${data.dir}/META-INF"/>
		<mkdir dir="src/data/${data.dir}.ical/META-INF"/>
		<mkdir dir="src/data/${data.dir}.caldav/META-INF"/>
		<mkdir dir="src/data/${data.dir}.carddav/META-INF"/>
		<mkdir dir="src/data/${data.dir}.webdav/META-INF"/>
		<mkdir dir="src/data/${data.dir}.imap/META-INF"/>
		<mkdir dir="src/data/${data.dir}.vcard/META-INF"/>
		<mkdir dir="src/data/${data.dir}.spaces/META-INF"/>
		<mkdir dir="src/data/${data.dir}.rest/META-INF"/>
		<mkdir dir="src/data/${data.dir}.ldap/META-INF"/>
		<mkdir dir="src/data/${data.dir}.bpi/META-INF"/>
		<mkdir dir="src/data/${data.dir}.calendar/META-INF"/>
		<mkdir dir="src/data/${data.dir}.contacts/META-INF"/>
		<mkdir dir="src/data/${data.dir}.documents/META-INF"/>
		<!-- Assert existence of data.dir.base directories -->
		<mkdir dir="src/data/${data.dir.base}/_style"/>
		<mkdir dir="src/data/${data.dir.base}/bootstrap"/>
		<mkdir dir="src/data/${data.dir.base}/code"/>
		<mkdir dir="src/data/${data.dir.base}/data"/>
		<mkdir dir="src/data/${data.dir.base}/documents"/>
		<mkdir dir="src/data/${data.dir.base}/filters"/>
		<mkdir dir="src/data/${data.dir.base}/html"/>
		<mkdir dir="src/data/${data.dir.base}/images"/>
		<mkdir dir="src/data/${data.dir.base}/ui"/>
		<mkdir dir="src/data/${data.dir}/js"/>		
		<mkdir dir="src/data/${data.dir.base}/wizards"/>
		<!-- META-INF dir for application -->
		<mkdir dir="src/ear/opencrx-core-${provider.name}.ear/META-INF"/>
		<!-- Prepare MyWebApp WAR -->
		<copy todir="${build.dir}/module/opencrx-core-${web.application.name}">
			<fileset dir="./etc/deployment-unit">
				<include name="*.war"/>
			</fileset>
		</copy>
		<!-- Build assemblies -->
		<ant dir="${opencrx.home}/core" inheritAll="true" target="assemble">
			<property name="deliver.dir" value="${deliver.dir}"/>
			<property name="build.target.platform" value="${build.java.platform}"/>
			<property name="data.home" value="${basedir}"/>
			<property name="data.dir.generic" value="${data.dir.generic}"/>
			<property name="data.dir.base" value="${data.dir.base}"/>
			<property name="data.dir" value="${data.dir}"/>
			<property name="web.application.name" value="${web.application.name}"/>
			<property name="provider.name" value="${provider.name}"/>
			<property name="datasource.name" value="${datasource.name}"/>
			<property name="opencrx.extension.classes" value="${opencrx.extension.classes}"/>
			<property name="kernel.interception.plugin.class.name" value="${kernel.interception.plugin.class.name}"/>
			<property name="kernel.type.plugin.class.name" value="${kernel.type.plugin.class.name}"/>
			<property name="kernel.application.plugin.class.name" value="${kernel.application.plugin.class.name}"/>
			<property name="kernel.model.plugin.class.name" value="${kernel.model.plugin.class.name}"/>
			<property name="kernel.persistence.plugin.class.name" value="${kernel.persistence.plugin.class.name}"/>
			<property name="security.application.plugin.class.name" value="${security.application.plugin.class.name}"/>
			<property name="security.persistence.plugin.class.name" value="${security.persistence.plugin.class.name}"/>
			<property name="extended.access.level.basic.enable.begin" value="${extended.access.level.basic.enable.begin}"/>
			<property name="extended.access.level.basic.enable.end" value="${extended.access.level.basic.enable.end}"/>
		</ant>
		<!-- opencrx-${base.dir.name}-store.war -->
		<openmdx:archive format="war" destfile="${deliver.dir}/deployment-unit/opencrx-${base.dir.name}-store.war" duplicate="preserve">
			<manifest>
				<attribute name="Specification-Title" value="${project.specification.title} Store WAR"/>
				<attribute name="Implementation-Title" value="WAR for ${build.target.platform}"/>
			</manifest>
			<zipfileset dir="src/war/opencrx-sample-store.war">
				<include name="**"/>
			</zipfileset>
			<zipfileset dir="${build.dir}/bin" prefix="WEB-INF/classes">
				<include name="org/opencrx/sample/store/**"/>
			</zipfileset>
			<zipfileset dir="${opencrx.home}/${build.target.platform}/core/lib" prefix="WEB-INF/lib">
				<include name="opencrx-client.jar"/>
			</zipfileset>
			<zipfileset dir="${openmdx.home}/${build.target.platform}/client/lib" prefix="WEB-INF/lib">
				<include name="openmdx-client.jar"/>
			</zipfileset>
		</openmdx:archive>
		<!-- opencrx-${base.dir.name}-mycontact.war -->
		<openmdx:archive format="war" destfile="${deliver.dir}/deployment-unit/opencrx-${base.dir.name}-mycontact.war" duplicate="preserve">
			<manifest>
				<attribute name="Specification-Title" value="${project.specification.title} MyContact WAR"/>
				<attribute name="Implementation-Title" value="WAR for ${build.target.platform}"/>
			</manifest>
			<zipfileset dir="src/war/opencrx-sample-mycontact.war">
				<include name="**"/>
			</zipfileset>
		</openmdx:archive>
	</target>
	<!-- ******************************************************************* -->
	<!-- * distribution -->
	<!-- ******************************************************************* -->
	<target name="distribution" description="Creates all distributions" depends="distribution-init,deliverables">
		<mkdir dir="../distribution"/>
		<openmdx:archive destfile="${distribution.dir}/${project.implementation.prefix}-${project.implementation.version}-${base.dir.name}.${build.target.platform}." format="${distribution.format}" checksum="MD5">
			<openmdx:archivefileset dir="${basedir}" prefix="opencrx-custom/${base.dir.name}">
				<include name="LICENSE"/>
				<include name="README"/>
				<include name="RELEASE-NOTES"/>
				<include name="NOTICE"/>
				<include name=".project"/>
				<include name=".classpath"/>
				<include name="build.xml"/>
				<include name="build.properties"/>
				<include name="version.properties"/>
				<include name="etc/**"/>
			</openmdx:archivefileset>
			<openmdx:archivefileset dir="${project.home}" prefix="opencrx-custom">
				<include name="source-archive/${base.dir.name}/**"/>
				<include name="${build.target.platform}/${base.dir.name}/src/opencrx-*"/>
				<include name="${build.target.platform}/${base.dir.name}/lib/opencrx-*"/>
			</openmdx:archivefileset>
		</openmdx:archive>
	</target>
	<!-- ******************************************************************* -->
	<!-- * validate-war -->
	<!-- ******************************************************************* -->
	<target name="validate-war" description="Validate WARs" depends="build-init">	
		<antcall target="-validate-war-">
			<param name="module.name" value="opencrx-core-${web.application.name}/opencrx-core-${web.application.name}.war"/>
		</antcall>
  	</target>
	<!-- ******************************************************************* -->
	<!-- * java-archives -->
	<!-- ******************************************************************* -->
	<target name="java-archives" depends="deliverables-init,build">
		<!-- opencrx-${base.dir.name}.jar -->
		<openmdx:archive destfile="${deliver.dir}/lib/opencrx-${base.dir.name}.jar" format="jar">
			<openmdx:archivemanifest refid="project.manifest"/>
			<manifest>
				<attribute name="Specification-Title" value="${project.specification.title} Library ${ant.project.name}"/>
				<attribute name="Implementation-Title" value="${ant.project.name} for ${build.target.platform}"/>
			</manifest>
			<openmdx:archivefileset dir="${build.dir}/bin">
				<patternset id="custom.jar.content">
					<include name="org/opencrx/sample/**"/>
					<include name="org/opencrx/sample/xmi/**"/>
				</patternset>
			</openmdx:archivefileset>
			<openmdx:archivefileset dir="src/resource">
				<patternset refid="custom.jar.content"/>
				<patternset>
					<include name="org/opencrx/sample/**"/>
					<include name="META-INF/**"/>
				</patternset>
			</openmdx:archivefileset>
			<openmdx:archivefileset src="${build.dir}/model/${ant.project.name}.openmdx-xmi.zip">
				<patternset refid="custom.jar.content"/>
			</openmdx:archivefileset>
		</openmdx:archive>
		<!-- opencrx-extension.jar -->
		<openmdx:archive destfile="${deliver.dir}/lib/opencrx-extension.jar" format="jar">
			<openmdx:archivemanifest refid="project.manifest"/>
			<manifest>
				<attribute name="Specification-Title" value="${project.specification.title} Library extension"/>
				<attribute name="Implementation-Title" value="opencrx-extension for ${build.target.platform}"/>
			</manifest>
			<openmdx:archivefileset dir="${build.dir}/bin">
				<patternset id="opencrx-extension.jar.content">
					<include name="org/opencrx/sample/**"/>
					<include name="org/opencrx/sample/xmi/**"/>
				</patternset>
			</openmdx:archivefileset>
			<openmdx:archivefileset dir="src/resource">
				<patternset refid="opencrx-extension.jar.content"/>
				<patternset>
					<include name="org/opencrx/sample/**"/>
					<include name="META-INF/**"/>
				</patternset>
			</openmdx:archivefileset>
			<openmdx:archivefileset src="${build.dir}/model/${ant.project.name}.openmdx-xmi.zip">
				<include name="${opencrx.extension.classes}"/>
			</openmdx:archivefileset>
		</openmdx:archive>
		<!-- ${base.dir.name}-client.jar -->
		<openmdx:archive destfile="${deliver.dir}/lib/opencrx-${base.dir.name}-client.jar" format="jar">
			<patternset refid="client.jar.content" />
			<openmdx:archivemanifest refid="project.manifest" />
			<manifest>
				<attribute name="Specification-Title" value="${project.specification.title} ${base.dir.name} Client" />
				<attribute name="Implementation-Title" value="${base.dir.name} client for ${build.target.platform}" />
			</manifest>
			<openmdx:archivefileset dir="${build.dir}/bin">
				<patternset refid="client.jar.content" />
			</openmdx:archivefileset>
		</openmdx:archive>
	</target>
</project>
